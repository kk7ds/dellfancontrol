# min_fan is the minimum percentage we will ever run the fans at.
min_fan: 10
# Sensors to monitor
sensors:
  - name: Exhaust Temp
    type: ipmi
    # Setting a target means we will consider this sensor for fan control. If
    # no target is set, we will only consider it for panic (if set) and log
    # its value.
    target: 32
    # Setting a panic limit means that if this sensor ever exceeds this
    # threshold, we will revert to system-managed fan controls. If no panic
    # level is set, we will never let it push us into system-managed mode.
    panic: 40
  - name: Temp
    type: ipmi
    target: 50
    panic: 60
  - name: Temperature_Celsius:/dev/sdz
    type: sata
    target: 40
# poll_time is how often (in seconds) we poll IPMI for temps.
poll_time: 10
pid:
  # pid.sample_time is the lower limit on how often the PID controller
  # will make a change. 30s is a good value because any change takes a
  # while to be reflected in the temps.
  sample_time: 30
  # pid.target_temp is the temperature we're shooting for. Higher than
  # that, and we'll command fans to reach that point. Lower than that
  # and we assume we only need minimal cooling.
  target_temp: 32
  # pid.fan_scale is the step size we use for increasing the
  # fans. This sort of overlaps with pid.kp, but is simpler. If PID
  # asks for one unit of control input, we'll multiply by this
  # number. Recommend this be set to 1 unless there's a reason not to.
  fan_scale: 1
  # pid.kp, pid.ki, pid.kd: The usual PID parameters. Defaults of 2,
  # 0.02, 0 work well for me.
  kp: 2
  ki: 0.02
  kd: 0
# Push the target and temperature values to graphite for monitoring
#graphite:
#  host: "eagle.hv.danplanet.com"
#  port: 2003
#  prefix_hostname: short
